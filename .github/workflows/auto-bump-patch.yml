name: Auto-bump Patch Version

on:
  pull_request:
    types: [closed]
    branches:
      - 'release/v*'

permissions:
  contents: write
  pull-requests: read

jobs:
  bump-patch-version:
    name: Bump patch version after Dependabot merge
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.merged == true &&
      github.event.pull_request.user.login == 'dependabot[bot]' &&
      startsWith(github.event.pull_request.base.ref, 'release/v')
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.base.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract current version from branch name
        id: extract-version
        run: |
          BRANCH_NAME="${{ github.event.pull_request.base.ref }}"
          echo "Branch: $BRANCH_NAME"
          
          # Extract major version from branch name (e.g., release/v1 -> 1)
          MAJOR_VERSION=$(echo "$BRANCH_NAME" | sed 's/release\/v//')
          echo "Major version: $MAJOR_VERSION"
          
          # Get the latest tag for this major version (format: vX.Y.Z)
          LATEST_TAG=$(git tag -l "v${MAJOR_VERSION}.*.*" --sort=-version:refname | head -n1)
          echo "Latest tag: $LATEST_TAG"
          
          if [ -z "$LATEST_TAG" ]; then
            # No existing version, start with X.0.0
            NEW_VERSION="${MAJOR_VERSION}.0.0"
          else
            # Extract current version components and increment patch
            CURRENT_VERSION=$(echo "$LATEST_TAG" | sed 's/^v//')
            MINOR_VERSION=$(echo "$CURRENT_VERSION" | cut -d'.' -f2)
            PATCH_VERSION=$(echo "$CURRENT_VERSION" | cut -d'.' -f3)
            NEW_PATCH=$((PATCH_VERSION + 1))
            NEW_VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${NEW_PATCH}"
          fi
          
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update action.yml with new version
        run: |
          NEW_TAG="${{ steps.extract-version.outputs.new_tag }}"
          echo "Updating action.yml to use $NEW_TAG"
          
          # Update the Docker image reference in action.yml
          sed -i "s|image: 'ghcr.io/vlindersoftware/validate-coverage:.*'|image: 'ghcr.io/vlindersoftware/validate-coverage:$NEW_TAG'|" action.yml
          
          echo "Updated action.yml:"
          grep "image:" action.yml

      - name: Create and push new tag
        run: |
          NEW_TAG="${{ steps.extract-version.outputs.new_tag }}"
          NEW_VERSION="${{ steps.extract-version.outputs.new_version }}"
          
          # Extract version components for convenience tags
          MAJOR=$(echo "$NEW_VERSION" | cut -d'.' -f1)
          MINOR=$(echo "$NEW_VERSION" | cut -d'.' -f2)
          MAJOR_TAG="v$MAJOR"
          MINOR_TAG="v$MAJOR.$MINOR"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Commit the action.yml update
          git add action.yml
          git commit -m "chore: update action.yml to use $NEW_TAG after dependency update
          
          Automatically bumped patch version due to dependency update in PR #${{ github.event.pull_request.number }}"
          
          # Create the full version tag
          git tag -a "$NEW_TAG" -m "chore: release $NEW_TAG
          
          Patch version bump after dependency update:
          - ${{ github.event.pull_request.title }}
          - Merged in PR #${{ github.event.pull_request.number }}"
          
          # Delete and recreate convenience tags
          echo "Updating convenience tags: $MAJOR_TAG, $MINOR_TAG"
          
          # Delete existing tags locally and remotely (ignore errors)
          git tag -d "$MAJOR_TAG" 2>/dev/null || true
          git tag -d "$MINOR_TAG" 2>/dev/null || true
          git push origin ":refs/tags/$MAJOR_TAG" 2>/dev/null || true
          git push origin ":refs/tags/$MINOR_TAG" 2>/dev/null || true
          
          # Create new convenience tags
          git tag -a "$MAJOR_TAG" -m "chore: update major tag $MAJOR_TAG to $NEW_TAG"
          git tag -a "$MINOR_TAG" -m "chore: update minor tag $MINOR_TAG to $NEW_TAG"
          
          # Push everything
          git push origin HEAD
          git push origin "$NEW_TAG"
          git push origin "$MAJOR_TAG"
          git push origin "$MINOR_TAG"
          
          echo "Created and pushed tags: $NEW_TAG, $MINOR_TAG, $MAJOR_TAG"

      - name: Trigger Docker build for new tag
        uses: actions/github-script@v8
        with:
          script: |
            const newTag = '${{ steps.extract-version.outputs.new_tag }}';
            
            // Trigger the release workflow
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'release.yml',
              ref: newTag
            });
            
            console.log(`Triggered release workflow for tag: ${newTag}`);

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.extract-version.outputs.new_tag }}
          name: ${{ steps.extract-version.outputs.new_tag }}
          body: |
            ðŸ¤– **Automated Patch Release** ðŸ¤–
            
            This patch version was automatically created after merging a Dependabot PR on the `${{ github.event.pull_request.base.ref }}` branch.
            
            **Changes:**
            - ${{ github.event.pull_request.title }}
            - Merged in PR #${{ github.event.pull_request.number }}
            
            **Docker Image:**
            - `ghcr.io/vlindersoftware/validate-coverage:${{ steps.extract-version.outputs.new_tag }}`
            
            This release includes the latest dependency updates while maintaining compatibility within the same major version.
          prerelease: false
          generate_release_notes: true

      - name: Comment on merged PR
        uses: actions/github-script@v8
        with:
          script: |
            const newTag = '${{ steps.extract-version.outputs.new_tag }}';
            const version = newTag.replace('v', '');
            const parts = version.split('.');
            const majorTag = `v${parts[0]}`;
            const minorTag = `v${parts[0]}.${parts[1]}`;
            
            const message = `ðŸŽ‰ **Patch Version Released** ðŸŽ‰

            This dependency update triggered the creation of patch version **${newTag}**.

            **Available tags:**
            - \`${newTag}\` (full version)
            - \`${minorTag}\` (minor convenience tag)  
            - \`${majorTag}\` (major convenience tag)

            **Docker Image:** \`ghcr.io/vlindersoftware/validate-coverage:${newTag}\`

            The new version is now available and published to GitHub Container Registry.`;
            
            github.rest.issues.createComment({
              issue_number: ${{ github.event.pull_request.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });