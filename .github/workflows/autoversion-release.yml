name: Autoversion Release

on:
  push:
    branches: [main, 'release/v*']
  pull_request:
    branches: [main, 'release/v*']
    types: [closed]

permissions:
  contents: write
  packages: write
  pull-requests: write
  actions: write

jobs:
  version:
    name: Version and Release
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/v'))) ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && 
       (github.event.pull_request.head.ref == 'main' || startsWith(github.event.pull_request.head.ref, 'release/v')) &&
       github.actor == 'dependabot[bot]')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Auto Version
        id: version
        uses: VlinderSoftware/autoversion@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          tag-prefix: 'v'
        continue-on-error: true

      - name: Check if version was created
        id: check-version
        run: |
          if [ -n "${{ steps.version.outputs.patch-tag }}" ]; then
            echo "version-created=true" >> $GITHUB_OUTPUT
            echo "Version ${{ steps.version.outputs.patch-tag }} was created"
          else
            echo "version-created=false" >> $GITHUB_OUTPUT
            echo "No new version was created"
          fi

      - name: Create Release Branch
        if: steps.check-version.outputs.version-created == 'true' && github.ref == 'refs/heads/main'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)
          RELEASE_BRANCH="release/v${MAJOR_VERSION}"
          
          # Check if release branch already exists
          if git show-ref --verify --quiet refs/remotes/origin/$RELEASE_BRANCH; then
            echo "Release branch $RELEASE_BRANCH already exists, updating it"
            git checkout $RELEASE_BRANCH
            git reset --hard main
            git push origin $RELEASE_BRANCH --force
          else
            echo "Creating new release branch $RELEASE_BRANCH"
            git checkout -b $RELEASE_BRANCH
            git push origin $RELEASE_BRANCH
          fi

      - name: Update action.yml version reference
        if: steps.check-version.outputs.version-created == 'true'
        continue-on-error: true
        run: |
          # Update action.yml to reference the new version tag in the Docker image
          sed -i "s/image: 'docker:\/\/ghcr\.io\/vlindersoftware\/validate-coverage:.*/image: 'docker:\/\/ghcr.io\/vlindersoftware\/validate-coverage:${{ steps.version.outputs.patch-tag }}'/" action.yml
          
          # Commit if there are changes
          if ! git diff --quiet action.yml; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add action.yml
            git commit -m "chore: Update action.yml to reference ${{ steps.version.outputs.patch-tag }}"
            git push
          fi

      - name: Create GitHub Release
        if: steps.check-version.outputs.version-created == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.patch-tag }}
          release_name: ${{ steps.version.outputs.patch-tag }}
          body: |
            ## Changes
            
            Automated release for version ${{ steps.version.outputs.version }}
            
            ## Usage
            
            ```yaml
            - name: Validate Coverage
              uses: vlindersoftware/validate-coverage@${{ steps.version.outputs.patch-tag }}
              with:
                coverage-file: 'coverage/clover.xml'
                coverage-minimum: '80'
            ```
            
            Or use the major version for automatic updates:
            
            ```yaml
            - name: Validate Coverage
              uses: vlindersoftware/validate-coverage@v1
              with:
                coverage-file: 'coverage/clover.xml'
                coverage-minimum: '80'
            ```
          draft: false
          prerelease: false

  validate:
    name: Validate Action
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Validate action.yml
        run: |
          # Check that action.yml exists and is valid YAML
          if [ ! -f action.yml ]; then
            echo "Error: action.yml not found"
            exit 1
          fi
          
          # Install dependencies for YAML validation
          sudo apt-get update
          sudo apt-get install -y python3-yaml
          
          # Basic YAML validation
          python3 -c "import yaml; yaml.safe_load(open('action.yml'))"
          echo "✓ action.yml is valid YAML"
          
          # Check required fields
          if ! grep -q "name:" action.yml; then
            echo "Error: action.yml missing 'name' field"
            exit 1
          fi
          
          if ! grep -q "description:" action.yml; then
            echo "Error: action.yml missing 'description' field"
            exit 1
          fi
          
          echo "✓ action.yml has required fields"

      - name: Test Coverage Script
        run: |
          # Install xmllint for testing
          sudo apt-get update
          sudo apt-get install -y libxml2-utils
          
          # Test the coverage validation script
          chmod +x validate-coverage.sh
          
          # Create a test coverage file
          mkdir -p test-coverage
          cat > test-coverage/clover.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <coverage generated="1234567890">
            <project timestamp="1234567890">
              <metrics files="1" loc="100" ncloc="90" classes="1" methods="10" coveredmethods="8" conditionals="5" coveredconditionals="4" statements="50" coveredstatements="40" elements="65" coveredelements="52"/>
            </project>
          </coverage>
          EOF
          
          # Test with 80% threshold (should pass with our 80% coverage)
          ./validate-coverage.sh test-coverage/clover.xml 80
          echo "✓ Coverage validation test passed"